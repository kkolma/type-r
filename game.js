const words = [
    'hello',
    'world',
    'foo',
    'bar',
    'typing',
    'javascript',
    'phaser',
    'open source',
    'space',
    'shoot',
    'game over'
];

class TypingScene extends Phaser.Scene {
    constructor() {
        super({ key: 'typing' });
    }

    preload() {
        // Nincsenek assetek
    }

    create() {
        // Csoport a zuhan√≥ szavaknak
        this.words = this.add.group();

        // A j√°t√©kos ≈±rhaj√≥ja (text sprite-k√©nt)
        this.add.text(
            this.scale.width / 2,
            this.scale.height - 50,
            'üöÄ',
            { fontSize: '32px' }
        ).setOrigin(0.5);

        // Billenty≈±zetfigyel√©s
        this.input.keyboard.on('keydown', this.handleKey, this);

        // Szavak ind√≠t√°sa id≈ëz√≠t≈ëvel
        this.time.addEvent({
            delay: 2000,
            callback: this.spawnWord,
            callbackScope: this,
            loop: true
        });

        // **************************************************
        // INPUT-KEZEL√âS √°llapotv√°ltoz√≥k
        // **************************************************
        // Ha false, m√©g nem tal√°ltad el semelyik sz√≥ els≈ë bet≈±j√©t
        this.inputStarted = false;
        // A kiv√°lasztott sz√≥, amin dolgozunk
        this.currentWord = null;
    }

    spawnWord() {
        // V√©letlenszer≈± sz√≥, v√©letlen X poz√≠ci√≥
        const text = Phaser.Utils.Array.GetRandom(words);
        const x = Phaser.Math.Between(50, this.scale.width - 50);
        const speed = Phaser.Math.Between(50, 120);

        const word = this.add.text(x, 0, text, { fontSize: '24px', color: '#ffffff' });
        word.setData('speed', speed);
        this.words.add(word);
    }

    handleKey(event) {
        // Ha m√©g nem kezdt√©l bele (nem tal√°ltad el az els≈ë bet≈±t):
        if (!this.inputStarted) {
            // csak egykarakteres billenty≈±kre reag√°lunk
            if (event.key.length === 1) {
                // keres√ºnk olyan sz√≥t, amelynek az els≈ë karaktere egyezik
                let found = null;
                this.words.getChildren().forEach(word => {
                    if (!found && word.text.charAt(0).toLowerCase() === event.key.toLowerCase()) {
                        found = word;
                    }
                });
                if (found) {
                    // eltal√°ltad az els≈ë bet≈±t
                    this.inputStarted = true;
                    this.currentWord = found;
                    // elt√ºntetj√ºk a sz√≥ els≈ë karakter√©t
                    const newText = found.text.substring(1);
                    found.setText(newText);
                    // ha √≠gy √ºres marad, megsemmis√≠tj√ºk r√∂gt√∂n
                    if (newText.length === 0) {
                        found.destroy();
                        this.inputStarted = false;
                        this.currentWord = null;
                    }
                }
            }
            // minden m√°s le√ºt√©st figyelmen k√≠v√ºl hagyunk, √©s nem jelen√≠t√ºnk meg semmit
            return;
        }

        // Ha m√°r egyszer eltal√°ltad az els≈ë bet≈±t, csak a kiv√°lasztott sz√≥hoz viszony√≠tunk
        if (this.currentWord && event.key.length === 1) {
            // ha a k√∂vetkez≈ë bet≈±t is eltal√°lod
            if (this.currentWord.text.charAt(0).toLowerCase() === event.key.toLowerCase()) {
                const newText = this.currentWord.text.substring(1);
                this.currentWord.setText(newText);
                // ha √ºres lett, t√∂r√∂lj√ºk √©s √∫jrac√©lz√°sra √°ll√≠tunk vissza
                if (newText.length === 0) {
                    this.currentWord.destroy();
                    this.inputStarted = false;
                    this.currentWord = null;
                }
            }
        }
        // egy√©b billenty≈±k √©s Backspace itt nem csin√°lnak semmit
    }

    update(time, delta) {
        // Szavak lefele mozgat√°sa, ha le√©rnek, megsemmis√ºlnek
        this.words.getChildren().forEach(word => {
            word.y += word.getData('speed') * delta / 1000;
            if (word.y > this.scale.height) {
                word.destroy();
                // itt lehet √©letet cs√∂kkenteni
            }
        });
    }
}

// Phaser j√°t√©k ind√≠t√°sa
new Phaser.Game({
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    backgroundColor: '#000000',
    scene: TypingScene
});
